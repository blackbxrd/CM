def adjugate_matrix(matrix):
    """
    Функция для вычисления присоединенной матрицы.

    Args:
    matrix: список списков, представляющий матрицу.

    Returns:
    Присоединенную матрицу.
    """
    n = len(matrix)   # получаем размерность матрицы
    adj = []   # создаем пустой список для присоединенной матрицы
    for i in range(n):
        adj_row = []   # создаем пустой список для i-ой строки присоединенной матрицы
        for j in range(n):
            minor = []   # создаем пустой список для минора матрицы
            for k in range(n):
                if k != i:
                    minor_row = []   # создаем пустой список для k-ой строки минора матрицы
                    for l in range(n):
                        if l != j:
                            minor_row.append(matrix[k][l])   # добавляем элементы в k-ую строку минора матрицы
                    minor.append(minor_row)   # добавляем k-ую строку минора матрицы в минор матрицы
            minor_det = determinant(minor)   # вычисляем определитель минора матрицы
            cofactor = (-1) ** (i+j) * minor_det   # вычисляем алгебраическое дополнение
            adj_row.append(cofactor)   # добавляем алгебраическое дополнение в i-ую строку присоединенной матрицы
        adj.append(adj_row)   # добавляем i-ую строку присоединенной матрицы в присоединенную матрицу
    return adj   # возвращаем присоединенную матрицу

def determinant(matrix):
    """
    Функция для вычисления определителя матрицы.

    Args:
    matrix: список списков, представляющий матрицу.

    Returns:
    Определитель матрицы.
    """
    n = len(matrix)   # получаем размерность матрицы
    if n == 1:
        return matrix[0][0]   # если матрица 1x1, возвращаем единственный элемент
    elif n == 2:
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]   # если матрица 2x2, вычисляем определитель по формуле
    else:
        det = 0   # создаем переменную для хранения определителя
        for j in range(n):
            minor = []   # создаем пустой список для минора матрицы
            for i in range(1, n):
                minor_row = []   # создаем пустой список для i-ой строки минора матрицы
                for k in range(n):
                    if k != j:
                        minor_row.append(matrix[i][k])   # добавляем элементы в i-ую строку минора матрицы
                minor.append(minor_row)    # Добавляем строку минора в список минора матрицы
                # Вычисляем определитель матрицы рекурсивно, используя миноры
            det += (-1) ** j * matrix[0][j] * determinant(minor)
        return det

def inverse(matrix):
    """
    Функция для вычисления обратной матрицы методом присоединенной матрицы.

    Args:
    matrix: список списков, представляющий матрицу.

    Returns:
    Обратную матрицу.
    """
    det = determinant(matrix)
    if det == 0:#Если определитель равен 0, то обратной матрицы не существует. 
        #В таком случае возбуждается исключение ValueError с соответствующим сообщением.
        raise ValueError("Определитель равен нулю, обратной матрицы не существует.")
    adj = adjugate_matrix(matrix)
    inv = []#Создание пустого списка inv 
    n = len(matrix)#присваивание переменной n длины матрицы matrix.
    
    #Этот блок выполняет вычисление обратной матрицы. 
    # Для каждой строки исходной матрицы создается строка обратной матрицы inv_row. 
    # Для каждого элемента i-ой строки j-го столбца присоединенной матрицы adj, 
    # элемент присоединенной матрицы делится на определитель det и добавляется в inv_row. 
    # После обработки всех элементов строки, строка inv_row добавляется в inv. 
    # Когда все строки обработаны, 
    # inv содержит обратную матрицу.
    for i in range(n):
        inv_row = []
        for j in range(n):
            inv_row.append(adj[j][i] / det)
        inv.append(inv_row)
    return inv

matrix = [[-1, -1, -1, -2], [2, 3, 4, 3], [-2, 0, 1, -6], [-2, -2, -3, -3]]#входная матрица
inverse_matrix = inverse(matrix)
for item in inverse_matrix:
    print(item)
