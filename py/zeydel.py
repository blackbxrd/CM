import numpy as np

# Задаём коэффициенты уравнений
A = np.array([[25, 4, 7, -3, -1],
              [-8, 42, 8, -9, -3],
              [-6, 4, 34, 4, -8],
              [-8, 4, 7, 36, 9],
              [6, -6, -2, -4, -29]])
# Задаём свободные члены
B = np.array([32, 60, 84, 96, 23])

# Находим диагональные элементы матрицы A
D = np.diag(np.diag(A))

# Находим нижнюю треугольную матрицу L и верхнюю треугольную матрицу U
L = np.tril(A, k=-1)
U = np.triu(A, k=1)

# Находим обратную диагональную матрицу D^(-1)
D_inv = np.linalg.inv(D)

# Находим матрицу T = -(D^(-1))(L+U)
T = -D_inv.dot(L + U)

# Находим вектор свободных членов C = (D^(-1))B
C = D_inv.dot(B)

# Начальное приближение
x = np.zeros_like(B)

# Задаём точность
eps = 0.001

# Итерационный процесс метода Зейделя
while True:
    x_new = T.dot(x) + C
    if np.max(np.abs(x_new - x)) < eps:
        break
    x = x_new

# Выводим решение
print("Решение СЛАУ методом Зейделя:", x)