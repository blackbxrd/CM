import numpy as np

# Создание матрицы коэффициентов A и вектора свободных членов b
A = np.array([[-0.74, 0.47, -0.15, -0.3, 0.81],
              [0.01, -0.65, -0.64, 0.58, -0.04],
              [-0.33, 0.01, -0.61, -0.95, 0.19],
              [-0.96, -0.42, -0.03, 0.68, -0.71],
              [0.07, 0.73, -0.97, 0.84, -0.35]])
b = np.array([-0.97, -0.86, -0.82, 0.99, -0.11])

# Создание расширенной матрицы A|b
Ab = np.column_stack((A, b))

# Прямой ход метода Жордана-Гаусса
n = Ab.shape[0]
for i in range(n):
    # Поиск максимального элемента в i-ом столбце
    max_row = i
    for j in range(i+1, n):
        if abs(Ab[j,i]) > abs(Ab[max_row,i]):
            max_row = j
    # Перестановка i-ой и max_row-ой строк
    Ab[[i, max_row]] = Ab[[max_row, i]]
    # Приведение i-ой строки к диагональному виду
    for j in range(i+1, n):
        factor = Ab[j,i]/Ab[i,i]
        Ab[j,:] -= factor * Ab[i,:]

# Обратный ход метода Жордана-Гаусса
x = np.zeros(n)
for i in range(n-1, -1, -1):
    x[i] = Ab[i,n] / Ab[i,i]
    for j in range(i-1, -1, -1):
        Ab[j,n] -= Ab[j,i] * x[i]
        
print("Решение системы:", x)