import numpy as np   # импорт библиотеки NumPy для работы с массивами и матрицами

A = np.array([[-0.74, 0.47, -0.15, -0.3, 0.81],   # матрица A
              [0.01, -0.65, -0.64, 0.58, -0.04],
              [-0.33, 0.01, -0.61, -0.95, 0.19],
              [-0.96, -0.42, -0.03, 0.68, -0.71],
              [0.07, 0.73, -0.97, 0.84, -0.35]])

B = np.array([-0.97, -0.86, -0.82, 0.99, -0.11])   # вектор B

n = len(A)   # размерность матрицы A

# LU-разложение
L = np.zeros((n, n))   # матрица L, начально заполненная нулями
U = np.zeros((n, n))   # матрица U, начально заполненная нулями

for j in range(n):   # цикл по столбцам
    L[j, j] = 1.0   # на главной диагонали матрицы L ставим единицы
    for i in range(j+1):   # цикл по строкам
        s1 = sum(U[k, j] * L[i, k] for k in range(i))   # вычисляем сумму элементов для матрицы U
        U[i, j] = A[i, j] - s1   # вычисляем элементы матрицы U
    for i in range(j, n):   # цикл по строкам
        s2 = sum(U[k, j] * L[i, k] for k in range(j))   # вычисляем сумму элементов для матрицы L
        L[i, j] = (A[i, j] - s2) / U[j, j]   # вычисляем элементы матрицы L

# Решение системы с помощью LU-разложения
y = np.zeros(n)   # вектор y, начально заполненный нулями
for i in range(n):   # цикл по строкам
    s3 = sum(L[i, k] * y[k] for k in range(i))   # вычисляем сумму элементов для вектора y
    y[i] = (B[i] - s3) / L[i, i]   # вычисляем элементы вектора y

x = np.zeros(n)# создание вектора x размера n, заполненного нулями
for i in range(n-1, -1, -1): # цикл по строкам в обратном порядке
    s4 = sum(U[i, k] * x[k] for k in range(i+1, n))# суммирование произведений элементов матрицы U и вектора x
    x[i] = (y[i] - s4) / U[i, i]# вычисление элемента вектора x

print("Решение системы:", x) # вывод решения системы на экран